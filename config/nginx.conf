worker_processes 4;

error_log  /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex on; # set to 'on' if nginx worker_processes > 1
  # 'use epoll;' to enable for Linux 2.6+
  # 'use kqueue;' to enable for FreeBSD, OSX
}

http {
  include mime.types;
  # fallback in case we can't determine a type
  default_type application/octet-stream;
  access_log /var/log/nginx/access.log combined;
  sendfile on;

  log_format upstreamlog '[$time_local] $remote_addr - $remote_user - $server_name to: $upstream_addr: $request upstream_response_time $upstream_response_time msec $msec request_time $request_time';

  upstream app_server {
    server 127.0.0.1:5000 fail_timeout=60;
  }

  upstream peer_server {
    server 127.0.0.1:9000 fail_timeout=60;
  }

  server {
    listen 80;
    client_max_body_size 4G;

    # # set the correct host(s) for your site
    # server_name example.com www.example.com;

    keepalive_timeout 60;

    # path for static files
    root /whiteboard/client/dist;

    location / {
      # checks for static file, if not found proxy to app
      try_files $uri $uri/index.html @proxy_to_app;
    }

    location @proxy_to_app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
      proxy_buffering off;
      proxy_pass http://app_server;
    }

    location /whiteboard.io {
      include proxy_params;
      proxy_http_version 1.1;
      proxy_buffering off;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
      proxy_pass http://app_server/whiteboard.io;
    }

    location /peerjs {
      access_log  /var/log/nginx/peerjs.log upstreamlog;

      include proxy_params;
      proxy_http_version 1.1;
      proxy_buffering off;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
      proxy_pass http://peer_server;
    }
  }
}

daemon off;
